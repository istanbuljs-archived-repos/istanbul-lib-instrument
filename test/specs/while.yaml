---
name: simple while
code: |
  var x = args[0], i=0;
  while (i < x) i++;
  output = i;
tests:
  - name: covers loop once
    args: [1]
    out: 1
    lines: {'1': 1, '2': 1, '3': 1}
    statements: {'0': 1,  '1': 1, '2': 1, '3': 1, '4': 1}

  - name: covers loop multiple times
    args: [10]
    out: 10
    lines: {'1': 1, '2': 10, '3': 1}
    statements: {'0': 1, '1': 1, '2': 1, '3': 10, '4': 1}

---
name: simple while - statement on new line
code: |
  var x = args[0], i=0;
  while (i < x)
     i++;
  output = i;
tests:
  - name: enters loop
    args: [10]
    out: 10
    lines: {'1': 1, '2': 1, '3': 10, '4': 1}
    statements: {'0': 1, '1': 1, '2': 1, '3': 10, '4': 1}

  - name: does not enter loop
    args: [-1]
    out: 0
    lines: {'1': 1, '2': 1, '3': 0, '4': 1}
    statements: {'0': 1, '1': 1, '2': 1, '3': 0, '4': 1}

---
name: simple while - statement in block
code: |
  var x = args[0], i=0;
  while (i < x) { i++; }
  output = i;
tests:
  - name: enters loop
    args: [10]
    out: 10
    lines: {'1': 1, '2': 10, '3': 1}
    statements: {'0': 1, '1': 1, '2': 1, '3': 10, '4': 1}

---
name: labeled nested while
code: |
  var x = args[0], i=0, j=0, output = 0;
  outer:
     while (i++ < x) {
         j =0;
         while (j++ < i) {
             output++;
             if (j === 2) continue outer;
         }
     }
tests:
  - name: line/branch coverage when all branches exercised
    args: [10]
    out: 19
    lines: {'1': 1, '2': 1, '3': 1, '4': 10, '5': 10, '6': 19, '7': 19}
    branches: {'0': [9, 10]}
    statements: {'0': 1, '1':1, '2':1, '3':1, '4': 1, '5': 1, '6': 10, '7': 10, '8': 19, '9': 19, '10': 9}

  - name: line/branch coverage when nothing exercised
    args: [-1]
    out: 0
    lines: {'1': 1, '2': 1, '3': 1, '4': 0, '5': 0, '6': 0, '7': 0}
    branches: {'0': [0, 0]}
    statements: {'0': 1, '1':1, '2':1, '3':1, '4': 1, '5': 1, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0}
